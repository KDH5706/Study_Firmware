
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000993  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  00000bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	53 d0       	rcall	.+166    	; 0x140 <main>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_keypad>:
#include <avr/io.h>
#include <util/delay.h>

void init_keypad()
{
	DDRA = 0xF8; //0b 1111 1000
  9e:	88 ef       	ldi	r24, 0xF8	; 248
  a0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x07; //0b 0000 0111
  a2:	87 e0       	ldi	r24, 0x07	; 7
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	08 95       	ret

000000a8 <keyscan>:
}

unsigned char keyscan()
{
	PORTA = 0x08;	//0b 0000 1000
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	97 e0       	ldi	r25, 0x07	; 7
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <keyscan+0x8>
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 1;
  b4:	c8 99       	sbic	0x19, 0	; 25
  b6:	2e c0       	rjmp	.+92     	; 0x114 <keyscan+0x6c>
	if(((PINA >> 1) & 0x01) == 1) return 2;
  b8:	c9 99       	sbic	0x19, 1	; 25
  ba:	2e c0       	rjmp	.+92     	; 0x118 <keyscan+0x70>
	if(((PINA >> 2) & 0x01) == 1) return 3;
  bc:	ca 99       	sbic	0x19, 2	; 25
  be:	2e c0       	rjmp	.+92     	; 0x11c <keyscan+0x74>
	
	PORTA = 0x10;	//0b 0001 0000
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	97 e0       	ldi	r25, 0x07	; 7
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <keyscan+0x20>
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 4;
  cc:	c8 99       	sbic	0x19, 0	; 25
  ce:	28 c0       	rjmp	.+80     	; 0x120 <keyscan+0x78>
	if(((PINA >> 1) & 0x01) == 1) return 5;
  d0:	c9 99       	sbic	0x19, 1	; 25
  d2:	28 c0       	rjmp	.+80     	; 0x124 <keyscan+0x7c>
	if(((PINA >> 2) & 0x01) == 1) return 6;
  d4:	ca 99       	sbic	0x19, 2	; 25
  d6:	28 c0       	rjmp	.+80     	; 0x128 <keyscan+0x80>
	
	PORTA = 0x20;	//0b 0010 0000
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <keyscan+0x38>
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 7;
  e4:	c8 99       	sbic	0x19, 0	; 25
  e6:	22 c0       	rjmp	.+68     	; 0x12c <keyscan+0x84>
	if(((PINA >> 1) & 0x01) == 1) return 8;
  e8:	c9 99       	sbic	0x19, 1	; 25
  ea:	22 c0       	rjmp	.+68     	; 0x130 <keyscan+0x88>
	if(((PINA >> 2) & 0x01) == 1) return 9;
  ec:	ca 99       	sbic	0x19, 2	; 25
  ee:	22 c0       	rjmp	.+68     	; 0x134 <keyscan+0x8c>
	
	PORTA = 0x40;	//0b 0100 0000
  f0:	80 e4       	ldi	r24, 0x40	; 64
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	83 e3       	ldi	r24, 0x33	; 51
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <keyscan+0x50>
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 10;
  fc:	c8 99       	sbic	0x19, 0	; 25
  fe:	1c c0       	rjmp	.+56     	; 0x138 <keyscan+0x90>
	if(((PINA >> 1) & 0x01) == 1) return 11;
 100:	c9 99       	sbic	0x19, 1	; 25
 102:	1c c0       	rjmp	.+56     	; 0x13c <keyscan+0x94>
	if(((PINA >> 2) & 0x01) == 1) return 12;
 104:	99 b3       	in	r25, 0x19	; 25
 106:	92 fb       	bst	r25, 2
 108:	88 27       	eor	r24, r24
 10a:	80 f9       	bld	r24, 0
 10c:	92 ff       	sbrs	r25, 2
 10e:	17 c0       	rjmp	.+46     	; 0x13e <keyscan+0x96>
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	08 95       	ret

unsigned char keyscan()
{
	PORTA = 0x08;	//0b 0000 1000
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
	if(((PINA >> 1) & 0x01) == 1) return 2;
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	08 95       	ret
	if(((PINA >> 2) & 0x01) == 1) return 3;
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	08 95       	ret
	
	PORTA = 0x10;	//0b 0001 0000
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 4;
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	08 95       	ret
	if(((PINA >> 1) & 0x01) == 1) return 5;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	08 95       	ret
	if(((PINA >> 2) & 0x01) == 1) return 6;
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	08 95       	ret
	
	PORTA = 0x20;	//0b 0010 0000
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 7;
 12c:	87 e0       	ldi	r24, 0x07	; 7
 12e:	08 95       	ret
	if(((PINA >> 1) & 0x01) == 1) return 8;
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	08 95       	ret
	if(((PINA >> 2) & 0x01) == 1) return 9;
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	08 95       	ret
	
	PORTA = 0x40;	//0b 0100 0000
	_delay_ms(1);
	if(((PINA >> 0) & 0x01) == 1) return 10;
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	08 95       	ret
	if(((PINA >> 1) & 0x01) == 1) return 11;
 13c:	8b e0       	ldi	r24, 0x0B	; 11
	if(((PINA >> 2) & 0x01) == 1) return 12;
	
	return 0;
}
 13e:	08 95       	ret

00000140 <main>:

int main()
{
	DDRC = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
	init_keypad();
 144:	ac df       	rcall	.-168    	; 0x9e <init_keypad>
	
	while(1){
		unsigned char key = keyscan();
 146:	b0 df       	rcall	.-160    	; 0xa8 <keyscan>
 148:	85 bb       	out	0x15, r24	; 21
		PORTC = key;
 14a:	fd cf       	rjmp	.-6      	; 0x146 <main+0x6>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
