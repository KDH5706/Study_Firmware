
TIMER_COUNT_16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c4  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e4  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a2  00000000  00000000  00001aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	45 c0       	rjmp	.+138    	; 0xf0 <__vector_25>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d0       	rcall	.+168    	; 0x16c <main>
  c4:	80 c0       	rjmp	.+256    	; 0x1c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init>:
volatile unsigned char time_s = 0;
volatile unsigned char FND_flag = 0, edge_flag = 0;

void Init()
{
	DDRA = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x00;
  cc:	12 b8       	out	0x02, r1	; 2
	
	//TCCR3A = 0x00;
	TCCR3B |= (1 << ICES3) | (1 << CS32) | (1 << CS30); //TCCR3B = 0x45;	Input Capture Edge Select, 분주비 : 1024
  ce:	ea e8       	ldi	r30, 0x8A	; 138
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	85 64       	ori	r24, 0x45	; 69
  d6:	80 83       	st	Z, r24
	ETIMSK |= (1 << TICIE3); //ETIMSK = 0x20;	Timer/Counter3, Input Capture Interrupt Enable
  d8:	ed e7       	ldi	r30, 0x7D	; 125
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	
	ETIFR |= (1 << ICF3);
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	80 83       	st	Z, r24
		
	sei();
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <__vector_25>:
}

ISR(TIMER3_CAPT_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	cli();
 108:	f8 94       	cli
	
	unsigned int count_check;
	
	if(edge_flag == 0)
 10a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 10e:	81 11       	cpse	r24, r1
 110:	0f c0       	rjmp	.+30     	; 0x130 <__vector_25+0x40>
	{
		TCCR3B = (1 << CS32) | (1 << CS30);	//TCCR3B = 0x05;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		TCNT3 = 0;
 118:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		ICR3 = 0;
 120:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 124:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		edge_flag = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 12e:	11 c0       	rjmp	.+34     	; 0x152 <__vector_25+0x62>
	}
	else
	{
		TCCR3B = (1 << ICES3) | (1 << CS32) | (1 << CS30);	//TCCR3B = 0x45;
 130:	85 e4       	ldi	r24, 0x45	; 69
 132:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		count_check = ICR3;
 136:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 13a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		
		time_s = count_check/7200;
 13e:	60 e2       	ldi	r22, 0x20	; 32
 140:	7c e1       	ldi	r23, 0x1C	; 28
 142:	2d d0       	rcall	.+90     	; 0x19e <__udivmodhi4>
 144:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <time_s>
		
		FND_flag = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <FND_flag>
		edge_flag = 0;
 14e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	
	sei();
 152:	78 94       	sei
}
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:

int main(void)
{
	Init();
 16c:	ad df       	rcall	.-166    	; 0xc8 <Init>
	PORTA = FND_DATA_TBL[0];
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	8b bb       	out	0x1b, r24	; 27
	while (1)
	{
		if(FND_flag)
 174:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <FND_flag>
 178:	88 23       	and	r24, r24
 17a:	e1 f3       	breq	.-8      	; 0x174 <main+0x8>
		{
			if(time_s > 15)
 17c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <time_s>
 180:	80 31       	cpi	r24, 0x10	; 16
 182:	18 f0       	brcs	.+6      	; 0x18a <main+0x1e>
			{
				time_s = 15;
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <time_s>
			}
			
			PORTA = FND_DATA_TBL[time_s];
 18a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <time_s>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 81       	ld	r24, Z
 196:	8b bb       	out	0x1b, r24	; 27
			FND_flag = 0;
 198:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <FND_flag>
 19c:	eb cf       	rjmp	.-42     	; 0x174 <main+0x8>

0000019e <__udivmodhi4>:
 19e:	aa 1b       	sub	r26, r26
 1a0:	bb 1b       	sub	r27, r27
 1a2:	51 e1       	ldi	r21, 0x11	; 17
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <__udivmodhi4_ep>

000001a6 <__udivmodhi4_loop>:
 1a6:	aa 1f       	adc	r26, r26
 1a8:	bb 1f       	adc	r27, r27
 1aa:	a6 17       	cp	r26, r22
 1ac:	b7 07       	cpc	r27, r23
 1ae:	10 f0       	brcs	.+4      	; 0x1b4 <__udivmodhi4_ep>
 1b0:	a6 1b       	sub	r26, r22
 1b2:	b7 0b       	sbc	r27, r23

000001b4 <__udivmodhi4_ep>:
 1b4:	88 1f       	adc	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	5a 95       	dec	r21
 1ba:	a9 f7       	brne	.-22     	; 0x1a6 <__udivmodhi4_loop>
 1bc:	80 95       	com	r24
 1be:	90 95       	com	r25
 1c0:	bc 01       	movw	r22, r24
 1c2:	cd 01       	movw	r24, r26
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
