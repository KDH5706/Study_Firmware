
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080019e  0080019e  000008b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196a  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b56  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb7  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e73  00000000  00000000  00004335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000051a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	95 c1       	rjmp	.+810    	; 0x330 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 39       	cpi	r26, 0x9E	; 158
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e9       	ldi	r26, 0x9E	; 158
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3a       	cpi	r26, 0xA5	; 165
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d3       	rcall	.+1548   	; 0x6d0 <main>
  c4:	5e c3       	rjmp	.+1724   	; 0x782 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	90 83       	st	Z, r25
  d2:	90 81       	ld	r25, Z
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	90 83       	st	Z, r25
  d8:	90 81       	ld	r25, Z
  da:	94 60       	ori	r25, 0x04	; 4
  dc:	90 83       	st	Z, r25
  de:	9b e7       	ldi	r25, 0x7B	; 123
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Lcd_Data+0x18>
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	8b e7       	ldi	r24, 0x7B	; 123
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Lcd_Data+0x20>
  ec:	80 81       	ld	r24, Z
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <Lcd_Cmd>:
  f4:	e5 e6       	ldi	r30, 0x65	; 101
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	9e 7f       	andi	r25, 0xFE	; 254
  fc:	90 83       	st	Z, r25
  fe:	90 81       	ld	r25, Z
 100:	9d 7f       	andi	r25, 0xFD	; 253
 102:	90 83       	st	Z, r25
 104:	90 81       	ld	r25, Z
 106:	94 60       	ori	r25, 0x04	; 4
 108:	90 83       	st	Z, r25
 10a:	9b e7       	ldi	r25, 0x7B	; 123
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <Lcd_Cmd+0x18>
 110:	8b bb       	out	0x1b, r24	; 27
 112:	8b e7       	ldi	r24, 0x7B	; 123
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <Lcd_Cmd+0x20>
 118:	80 81       	ld	r24, Z
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <Lcd_CHAR>:
 120:	d3 df       	rcall	.-90     	; 0xc8 <Lcd_Data>
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <Lcd_CHAR+0x6>
 12a:	08 95       	ret

0000012c <Lcd_STR>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <Lcd_STR+0xc>
 134:	f5 df       	rcall	.-22     	; 0x120 <Lcd_CHAR>
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	88 81       	ld	r24, Y
 13a:	81 11       	cpse	r24, r1
 13c:	fb cf       	rjmp	.-10     	; 0x134 <Lcd_STR+0x8>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <Lcd_Pos>:
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	89 9f       	mul	r24, r25
 148:	60 0d       	add	r22, r0
 14a:	11 24       	eor	r1, r1
 14c:	86 2f       	mov	r24, r22
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	d1 df       	rcall	.-94     	; 0xf4 <Lcd_Cmd>
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	97 e4       	ldi	r25, 0x47	; 71
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <Lcd_Pos+0x12>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <Lcd_Pos+0x18>
 15c:	00 00       	nop
 15e:	08 95       	ret

00000160 <Lcd_Clear>:
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	c8 df       	rcall	.-112    	; 0xf4 <Lcd_Cmd>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	97 e4       	ldi	r25, 0x47	; 71
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <Lcd_Clear+0x8>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <Lcd_Clear+0xe>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	bf df       	rcall	.-130    	; 0xf4 <Lcd_Cmd>
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	9e e0       	ldi	r25, 0x0E	; 14
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <Lcd_Init+0x8>
 17e:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	b8 df       	rcall	.-144    	; 0xf4 <Lcd_Cmd>
 184:	86 e6       	ldi	r24, 0x66	; 102
 186:	9e e0       	ldi	r25, 0x0E	; 14
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <Lcd_Init+0x16>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 18c:	00 00       	nop
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	b1 df       	rcall	.-158    	; 0xf4 <Lcd_Cmd>
 192:	86 e6       	ldi	r24, 0x66	; 102
 194:	9e e0       	ldi	r25, 0x0E	; 14
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Lcd_Init+0x24>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 19a:	00 00       	nop
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	aa df       	rcall	.-172    	; 0xf4 <Lcd_Cmd>
 1a0:	86 e6       	ldi	r24, 0x66	; 102
 1a2:	9e e0       	ldi	r25, 0x0E	; 14
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <Lcd_Init+0x32>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 1a8:	00 00       	nop
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	a3 df       	rcall	.-186    	; 0xf4 <Lcd_Cmd>
 1ae:	86 e6       	ldi	r24, 0x66	; 102
 1b0:	9e e0       	ldi	r25, 0x0E	; 14
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Lcd_Init+0x40>
	_delay_ms(2);
	Lcd_Clear();
 1b6:	00 00       	nop
 1b8:	d3 cf       	rjmp	.-90     	; 0x160 <Lcd_Clear>
 1ba:	08 95       	ret

000001bc <UART_Init>:
//Mode 결정 변수(Mode_flag) 및 Mode 변환 여부 체크 변수(swap)
volatile bool Mode_flag = true, swap = false;

void UART_Init()
{
	DDRE |= (1 << DDE1);	//TXD0 : 1, TXD0 : 0
 1bc:	82 b1       	in	r24, 0x02	; 2
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	82 b9       	out	0x02, r24	; 2
	//UCSR0A = 0x00;
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);		// Receiver Enable, Transmitter Enable
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	88 61       	ori	r24, 0x18	; 24
 1c6:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);	// Character Size : 8-bit
 1c8:	e5 e9       	ldi	r30, 0x95	; 149
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	86 60       	ori	r24, 0x06	; 6
 1d0:	80 83       	st	Z, r24
	//UBRR0H = 0x00;
	UBRR0L = 3;		//f : 7.3728MHz이고, Baud Rate : 115200일 때
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	89 b9       	out	0x09, r24	; 9
 1d6:	08 95       	ret

000001d8 <putch_USART0>:
}

void putch_USART0(unsigned char data)
{
	while((UCSR0A & 0x20) == 0); // 전송준비가 될때까지 대기
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <putch_USART0>
	UDR0 = data; // 데이터를 UDR0에 쓰면 전송
 1dc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret

000001e6 <puts_USART0>:
}
void puts_USART0(unsigned char *str)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
	while (*str != 0)
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <puts_USART0+0xc>
	{
		putch_USART0(*str);
 1ee:	f4 df       	rcall	.-24     	; 0x1d8 <putch_USART0>
		str++;
 1f0:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data; // 데이터를 UDR0에 쓰면 전송
	UCSR0A |= 0x20;
}
void puts_USART0(unsigned char *str)
{
	while (*str != 0)
 1f2:	88 81       	ld	r24, Y
 1f4:	81 11       	cpse	r24, r1
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <puts_USART0+0x8>
	{
		putch_USART0(*str);
		str++;
	}
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <getch>:
unsigned char getch()
{
	unsigned char data;
	while ((UCSR0A & 0x80) == 0)
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <getch+0xa>
	{
		if(Mode_flag == true) return CHANGE_MODE;	
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	81 11       	cpse	r24, r1
 206:	07 c0       	rjmp	.+14     	; 0x216 <getch+0x18>
	}
}
unsigned char getch()
{
	unsigned char data;
	while ((UCSR0A & 0x80) == 0)
 208:	5f 9b       	sbis	0x0b, 7	; 11
 20a:	fa cf       	rjmp	.-12     	; 0x200 <getch+0x2>
	{
		if(Mode_flag == true) return CHANGE_MODE;	
	}
	data = UDR0;
 20c:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
 20e:	9b b1       	in	r25, 0x0b	; 11
 210:	90 68       	ori	r25, 0x80	; 128
 212:	9b b9       	out	0x0b, r25	; 11
	return data;
 214:	08 95       	ret
unsigned char getch()
{
	unsigned char data;
	while ((UCSR0A & 0x80) == 0)
	{
		if(Mode_flag == true) return CHANGE_MODE;	
 216:	80 e8       	ldi	r24, 0x80	; 128
	}
	data = UDR0;
	UCSR0A |= 0x80;
	return data;
}
 218:	08 95       	ret

0000021a <LCD_Init>:

void LCD_Init()
{
	DDRA = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0xFF;
 21e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	Lcd_Init();
 222:	a7 df       	rcall	.-178    	; 0x172 <Lcd_Init>
	Lcd_Clear();
 224:	9d df       	rcall	.-198    	; 0x160 <Lcd_Clear>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	8f e7       	ldi	r24, 0x7F	; 127
 22a:	96 e1       	ldi	r25, 0x16	; 22
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <LCD_Init+0x12>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_Init+0x1c>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <Keypad_Init>:
 23a:	88 ef       	ldi	r24, 0xF8	; 248
	_delay_ms(1000);
}

void Keypad_Init()
{
	DDRF = 0xF8; //0b 1111 1000
 23c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x07; //0b 0000 0111
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 246:	08 95       	ret

00000248 <keyscan>:
}

unsigned char keyscan()
{
	PORTF = 0x08;	//0b 0000 1000
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	97 e0       	ldi	r25, 0x07	; 7
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <keyscan+0xa>
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '1';
 256:	00 99       	sbic	0x00, 0	; 0
 258:	48 c0       	rjmp	.+144    	; 0x2ea <keyscan+0xa2>
	if(((PINF >> 1) & 0x01) == 1) return '2';
 25a:	01 99       	sbic	0x00, 1	; 0
 25c:	48 c0       	rjmp	.+144    	; 0x2ee <keyscan+0xa6>
	if(((PINF >> 2) & 0x01) == 1) return '3';
 25e:	02 99       	sbic	0x00, 2	; 0
 260:	48 c0       	rjmp	.+144    	; 0x2f2 <keyscan+0xaa>
 262:	ef ef       	ldi	r30, 0xFF	; 255
 264:	f7 e4       	ldi	r31, 0x47	; 71
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <keyscan+0x1e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <keyscan+0x24>
 26c:	00 00       	nop
	_delay_ms(10);
	
	PORTF = 0x10;	//0b 0001 0000
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 274:	83 e3       	ldi	r24, 0x33	; 51
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <keyscan+0x30>
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '4';
 27c:	00 99       	sbic	0x00, 0	; 0
 27e:	3b c0       	rjmp	.+118    	; 0x2f6 <keyscan+0xae>
	if(((PINF >> 1) & 0x01) == 1) return '5';
 280:	01 99       	sbic	0x00, 1	; 0
 282:	3b c0       	rjmp	.+118    	; 0x2fa <keyscan+0xb2>
	if(((PINF >> 2) & 0x01) == 1) return '6';
 284:	02 99       	sbic	0x00, 2	; 0
 286:	3b c0       	rjmp	.+118    	; 0x2fe <keyscan+0xb6>
 288:	ef ef       	ldi	r30, 0xFF	; 255
 28a:	f7 e4       	ldi	r31, 0x47	; 71
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <keyscan+0x44>
 290:	00 c0       	rjmp	.+0      	; 0x292 <keyscan+0x4a>
 292:	00 00       	nop
	_delay_ms(10);
	
	PORTF = 0x20;	//0b 0010 0000
 294:	80 e2       	ldi	r24, 0x20	; 32
 296:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	97 e0       	ldi	r25, 0x07	; 7
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <keyscan+0x56>
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '7';
 2a2:	00 99       	sbic	0x00, 0	; 0
 2a4:	2e c0       	rjmp	.+92     	; 0x302 <keyscan+0xba>
	if(((PINF >> 1) & 0x01) == 1) return '8';
 2a6:	01 99       	sbic	0x00, 1	; 0
 2a8:	2e c0       	rjmp	.+92     	; 0x306 <keyscan+0xbe>
	if(((PINF >> 2) & 0x01) == 1) return '9';
 2aa:	02 99       	sbic	0x00, 2	; 0
 2ac:	2e c0       	rjmp	.+92     	; 0x30a <keyscan+0xc2>
 2ae:	ef ef       	ldi	r30, 0xFF	; 255
 2b0:	f7 e4       	ldi	r31, 0x47	; 71
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <keyscan+0x6a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <keyscan+0x70>
 2b8:	00 00       	nop
	_delay_ms(10);
	
	PORTF = 0x40;	//0b 0100 0000
 2ba:	80 e4       	ldi	r24, 0x40	; 64
 2bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <keyscan+0x7c>
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '*';
 2c8:	00 99       	sbic	0x00, 0	; 0
 2ca:	21 c0       	rjmp	.+66     	; 0x30e <keyscan+0xc6>
	if(((PINF >> 1) & 0x01) == 1) return '0';
 2cc:	01 99       	sbic	0x00, 1	; 0
 2ce:	21 c0       	rjmp	.+66     	; 0x312 <keyscan+0xca>
	if(((PINF >> 2) & 0x01) == 1) return '#';
 2d0:	90 b1       	in	r25, 0x00	; 0
 2d2:	92 fb       	bst	r25, 2
 2d4:	88 27       	eor	r24, r24
 2d6:	80 f9       	bld	r24, 0
 2d8:	92 fd       	sbrc	r25, 2
 2da:	1d c0       	rjmp	.+58     	; 0x316 <keyscan+0xce>
 2dc:	ef ef       	ldi	r30, 0xFF	; 255
 2de:	f7 e4       	ldi	r31, 0x47	; 71
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <keyscan+0x98>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <keyscan+0x9e>
 2e6:	00 00       	nop
	_delay_ms(10);
	
	return 0;
 2e8:	08 95       	ret

unsigned char keyscan()
{
	PORTF = 0x08;	//0b 0000 1000
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '1';
 2ea:	81 e3       	ldi	r24, 0x31	; 49
 2ec:	08 95       	ret
	if(((PINF >> 1) & 0x01) == 1) return '2';
 2ee:	82 e3       	ldi	r24, 0x32	; 50
 2f0:	08 95       	ret
	if(((PINF >> 2) & 0x01) == 1) return '3';
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	08 95       	ret
	_delay_ms(10);
	
	PORTF = 0x10;	//0b 0001 0000
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '4';
 2f6:	84 e3       	ldi	r24, 0x34	; 52
 2f8:	08 95       	ret
	if(((PINF >> 1) & 0x01) == 1) return '5';
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	08 95       	ret
	if(((PINF >> 2) & 0x01) == 1) return '6';
 2fe:	86 e3       	ldi	r24, 0x36	; 54
 300:	08 95       	ret
	_delay_ms(10);
	
	PORTF = 0x20;	//0b 0010 0000
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '7';
 302:	87 e3       	ldi	r24, 0x37	; 55
 304:	08 95       	ret
	if(((PINF >> 1) & 0x01) == 1) return '8';
 306:	88 e3       	ldi	r24, 0x38	; 56
 308:	08 95       	ret
	if(((PINF >> 2) & 0x01) == 1) return '9';
 30a:	89 e3       	ldi	r24, 0x39	; 57
 30c:	08 95       	ret
	_delay_ms(10);
	
	PORTF = 0x40;	//0b 0100 0000
	_delay_ms(1);
	if(((PINF >> 0) & 0x01) == 1) return '*';
 30e:	8a e2       	ldi	r24, 0x2A	; 42
 310:	08 95       	ret
	if(((PINF >> 1) & 0x01) == 1) return '0';
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	08 95       	ret
	if(((PINF >> 2) & 0x01) == 1) return '#';
 316:	83 e2       	ldi	r24, 0x23	; 35
	_delay_ms(10);
	
	return 0;
}
 318:	08 95       	ret

0000031a <StepMotor_Init>:

void StepMotor_Init()
{
	DDRC = 0xF0;
 31a:	80 ef       	ldi	r24, 0xF0	; 240
 31c:	84 bb       	out	0x14, r24	; 20
 31e:	08 95       	ret

00000320 <Mode_Interrupt_Init>:
}

void Mode_Interrupt_Init()
{
	DDRD = 0x00;
 320:	11 ba       	out	0x11, r1	; 17
	EIMSK = (1 << INT0);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	89 bf       	out	0x39, r24	; 57
	EICRA = (1 << ISC01) | (1 << ISC00);
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	sei();
 32c:	78 94       	sei
 32e:	08 95       	ret

00000330 <__vector_1>:
}

ISR(INT0_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
	cli();
 33e:	f8 94       	cli
	Mode_flag = !Mode_flag;
 340:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	89 27       	eor	r24, r25
 348:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 34c:	78 94       	sei
}
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <LCD_INFO>:

void LCD_INFO()
{
	Lcd_Pos(0,0);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	f1 de       	rcall	.-542    	; 0x144 <Lcd_Pos>
	Lcd_STR((unsigned char*)"Door lock system");
 362:	82 e2       	ldi	r24, 0x22	; 34
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	e2 de       	rcall	.-572    	; 0x12c <Lcd_STR>
	Lcd_Pos(1,0);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	eb de       	rcall	.-554    	; 0x144 <Lcd_Pos>
	Lcd_STR((unsigned char*)"Insert PW: ");
 36e:	81 e8       	ldi	r24, 0x81	; 129
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	dc ce       	rjmp	.-584    	; 0x12c <Lcd_STR>
 374:	08 95       	ret

00000376 <Piezo_Init>:
 376:	87 b3       	in	r24, 0x17	; 23
}

void Piezo_Init()
{
	DDRB |= (1 << DDB7);		// 포트B PB7(OC1C)을 출력 나머지는 입력포트로 설정
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	87 bb       	out	0x17, r24	; 23
	
	//TCCR1A = 0x00;						// WGM1(1:0) = "00" WGM(3:0) = "1100" CTC 모드
	TCCR1B |= (1 << WGM32) | (1 << WGM33);	// WGM1(3:2) = "11" WGM(3:0) = "1100" CTC 모드
 37c:	8e b5       	in	r24, 0x2e	; 46
 37e:	88 61       	ori	r24, 0x18	; 24
 380:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);					// CS1(2:0) = "001" clkI/O/1 (No prescaling)
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	81 60       	ori	r24, 0x01	; 1
 386:	8e bd       	out	0x2e, r24	; 46
	//TCCR1C = 0x00;
	TCNT1 = 0;
 388:	1d bc       	out	0x2d, r1	; 45
 38a:	1c bc       	out	0x2c, r1	; 44
 38c:	08 95       	ret

0000038e <Beep_Melody>:
}

void Beep_Melody()
{
	ICR1 = 7372800 / DoReMi[0];
 38e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <DoReMi>
 392:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <DoReMi+0x1>
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e8       	ldi	r23, 0x80	; 128
 39e:	80 e7       	ldi	r24, 0x70	; 112
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a8 d1       	rcall	.+848    	; 0x6f4 <__divmodsi4>
 3a4:	37 bd       	out	0x27, r19	; 39
 3a6:	26 bd       	out	0x26, r18	; 38
	TCCR1A = (1 << COM1C0);	// Toggle OC1C(PB7) on compare match.
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	8f bd       	out	0x2f, r24	; 47
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	8f e3       	ldi	r24, 0x3F	; 63
 3b0:	92 e0       	ldi	r25, 0x02	; 2
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <Beep_Melody+0x24>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <Beep_Melody+0x2e>
 3bc:	00 00       	nop
	_delay_ms(100); // 0.1초 지연
	TCCR1A = 0x00;	// 출력 종료
 3be:	1f bc       	out	0x2f, r1	; 47
 3c0:	08 95       	ret

000003c2 <Make_Melody>:
}

void Make_Melody(int input)
{
	ICR1 = 7372800 / DoReMi[input];
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	fc 01       	movw	r30, r24
 3c8:	e7 5f       	subi	r30, 0xF7	; 247
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	20 81       	ld	r18, Z
 3ce:	31 81       	ldd	r19, Z+1	; 0x01
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e8       	ldi	r23, 0x80	; 128
 3d8:	80 e7       	ldi	r24, 0x70	; 112
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	8b d1       	rcall	.+790    	; 0x6f4 <__divmodsi4>
 3de:	37 bd       	out	0x27, r19	; 39
 3e0:	26 bd       	out	0x26, r18	; 38
	TCCR1A = (1 << COM1C0);	// Toggle OC1C(PB7) on compare match.
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	8f bd       	out	0x2f, r24	; 47
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	8f e3       	ldi	r24, 0x3F	; 63
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <Make_Melody+0x2a>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <Make_Melody+0x34>
 3f6:	00 00       	nop
	_delay_ms(100); // 0.1초 지연
	TCCR1A = 0x00;	// 출력 종료
 3f8:	1f bc       	out	0x2f, r1	; 47
 3fa:	08 95       	ret

000003fc <Success_Melody>:
}

void Success_Melody()
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
	for (int i = 3; i < 10 ; i++)
 400:	c3 e0       	ldi	r28, 0x03	; 3
 402:	d0 e0       	ldi	r29, 0x00	; 0
 404:	09 c0       	rjmp	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		Make_Melody(i);
 406:	ce 01       	movw	r24, r28
 408:	dc df       	rcall	.-72     	; 0x3c2 <Make_Melody>
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	9f e8       	ldi	r25, 0x8F	; 143
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	TCCR1A = 0x00;	// 출력 종료
}

void Success_Melody()
{
	for (int i = 3; i < 10 ; i++)
 416:	21 96       	adiw	r28, 0x01	; 1
 418:	ca 30       	cpi	r28, 0x0A	; 10
 41a:	d1 05       	cpc	r29, r1
 41c:	a4 f3       	brlt	.-24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		Make_Melody(i);
		_delay_ms(20);
	}
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <Failure_Melody>:
				   
void Failure_Melody()
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
	for (int i = 0; i < 8 ; i++)
 428:	c0 e0       	ldi	r28, 0x00	; 0
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	13 c0       	rjmp	.+38     	; 0x454 <Failure_Melody+0x30>
	{
		if(i % 2 == 1) Make_Melody(4);
 42e:	ce 01       	movw	r24, r28
 430:	81 70       	andi	r24, 0x01	; 1
 432:	90 78       	andi	r25, 0x80	; 128
 434:	99 23       	and	r25, r25
 436:	24 f4       	brge	.+8      	; 0x440 <Failure_Melody+0x1c>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	8e 6f       	ori	r24, 0xFE	; 254
 43c:	9f 6f       	ori	r25, 0xFF	; 255
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	21 f4       	brne	.+8      	; 0x44c <Failure_Melody+0x28>
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	bc df       	rcall	.-136    	; 0x3c2 <Make_Melody>
 44a:	03 c0       	rjmp	.+6      	; 0x452 <Failure_Melody+0x2e>
		else Make_Melody(7);
 44c:	87 e0       	ldi	r24, 0x07	; 7
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	b8 df       	rcall	.-144    	; 0x3c2 <Make_Melody>
	}
}
				   
void Failure_Melody()
{
	for (int i = 0; i < 8 ; i++)
 452:	21 96       	adiw	r28, 0x01	; 1
 454:	c8 30       	cpi	r28, 0x08	; 8
 456:	d1 05       	cpc	r29, r1
 458:	54 f3       	brlt	.-44     	; 0x42e <Failure_Melody+0xa>
	{
		if(i % 2 == 1) Make_Melody(4);
		else Make_Melody(7);
	}
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <Open_Door>:

void Open_Door()
{
	// 2 * 500 = 1s 동안 스텝모터 작동
	for (int i = 0 ; i < 500 ; i++)
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	17 c0       	rjmp	.+46     	; 0x494 <Open_Door+0x34>
	{
		PORTC = Step[mot_cnt];
 466:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <mot_cnt>
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	ef 5f       	subi	r30, 0xFF	; 255
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	20 81       	ld	r18, Z
 472:	25 bb       	out	0x15, r18	; 21
		if(mot_cnt++ == 7) mot_cnt = 0;
 474:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <mot_cnt>
 478:	31 e0       	ldi	r19, 0x01	; 1
 47a:	32 0f       	add	r19, r18
 47c:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <mot_cnt>
 480:	27 30       	cpi	r18, 0x07	; 7
 482:	11 f4       	brne	.+4      	; 0x488 <Open_Door+0x28>
 484:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <mot_cnt>
 488:	e6 e6       	ldi	r30, 0x66	; 102
 48a:	fe e0       	ldi	r31, 0x0E	; 14
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <Open_Door+0x2c>
 490:	00 00       	nop
}

void Open_Door()
{
	// 2 * 500 = 1s 동안 스텝모터 작동
	for (int i = 0 ; i < 500 ; i++)
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	84 3f       	cpi	r24, 0xF4	; 244
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	9f 07       	cpc	r25, r31
 49a:	2c f3       	brlt	.-54     	; 0x466 <Open_Door+0x6>
	{
		PORTC = Step[mot_cnt];
		if(mot_cnt++ == 7) mot_cnt = 0;
		_delay_ms(2);
	}
}
 49c:	08 95       	ret

0000049e <Save_Input_num>:

void Save_Input_num(unsigned char temp, int input_pw_cnt)
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	60 97       	sbiw	r28, 0x10	; 16
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
	Byte pw_state[16] = "Insert PW: ";
 4b2:	9c e0       	ldi	r25, 0x0C	; 12
 4b4:	e1 e8       	ldi	r30, 0x81	; 129
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	de 01       	movw	r26, r28
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	01 90       	ld	r0, Z+
 4be:	0d 92       	st	X+, r0
 4c0:	9a 95       	dec	r25
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <Save_Input_num+0x1e>
 4c4:	fe 01       	movw	r30, r28
 4c6:	3d 96       	adiw	r30, 0x0d	; 13
 4c8:	94 e0       	ldi	r25, 0x04	; 4
 4ca:	df 01       	movw	r26, r30
 4cc:	1d 92       	st	X+, r1
 4ce:	9a 95       	dec	r25
 4d0:	e9 f7       	brne	.-6      	; 0x4cc <Save_Input_num+0x2e>

	//입력된 비밀번호 배열에 저장
	input_pw[input_pw_cnt] = temp;
 4d2:	fb 01       	movw	r30, r22
 4d4:	e0 56       	subi	r30, 0x60	; 96
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	80 83       	st	Z, r24
	
	//비밀번호 마스킹 문구 설정
	switch (input_pw_cnt)
 4da:	61 30       	cpi	r22, 0x01	; 1
 4dc:	71 05       	cpc	r23, r1
 4de:	a9 f0       	breq	.+42     	; 0x50a <Save_Input_num+0x6c>
 4e0:	1c f4       	brge	.+6      	; 0x4e8 <Save_Input_num+0x4a>
 4e2:	67 2b       	or	r22, r23
 4e4:	41 f0       	breq	.+16     	; 0x4f6 <Save_Input_num+0x58>
 4e6:	2e c0       	rjmp	.+92     	; 0x544 <Save_Input_num+0xa6>
 4e8:	62 30       	cpi	r22, 0x02	; 2
 4ea:	71 05       	cpc	r23, r1
 4ec:	c1 f0       	breq	.+48     	; 0x51e <Save_Input_num+0x80>
 4ee:	63 30       	cpi	r22, 0x03	; 3
 4f0:	71 05       	cpc	r23, r1
 4f2:	f9 f0       	breq	.+62     	; 0x532 <Save_Input_num+0x94>
 4f4:	27 c0       	rjmp	.+78     	; 0x544 <Save_Input_num+0xa6>
	{
		case 0:
		sprintf((char*)pw_state, "Insert PW: *");
 4f6:	8d e0       	ldi	r24, 0x0D	; 13
 4f8:	e3 e3       	ldi	r30, 0x33	; 51
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	de 01       	movw	r26, r28
 4fe:	11 96       	adiw	r26, 0x01	; 1
 500:	01 90       	ld	r0, Z+
 502:	0d 92       	st	X+, r0
 504:	8a 95       	dec	r24
 506:	e1 f7       	brne	.-8      	; 0x500 <Save_Input_num+0x62>
		break;
 508:	1d c0       	rjmp	.+58     	; 0x544 <Save_Input_num+0xa6>
		case 1:
		sprintf((char*)pw_state, "Insert PW: **");
 50a:	8e e0       	ldi	r24, 0x0E	; 14
 50c:	e0 e4       	ldi	r30, 0x40	; 64
 50e:	f1 e0       	ldi	r31, 0x01	; 1
 510:	de 01       	movw	r26, r28
 512:	11 96       	adiw	r26, 0x01	; 1
 514:	01 90       	ld	r0, Z+
 516:	0d 92       	st	X+, r0
 518:	8a 95       	dec	r24
 51a:	e1 f7       	brne	.-8      	; 0x514 <Save_Input_num+0x76>
		break;
 51c:	13 c0       	rjmp	.+38     	; 0x544 <Save_Input_num+0xa6>
		case 2:
		sprintf((char*)pw_state, "Insert PW: ***");
 51e:	8f e0       	ldi	r24, 0x0F	; 15
 520:	ee e4       	ldi	r30, 0x4E	; 78
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	de 01       	movw	r26, r28
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <Save_Input_num+0x8a>
		break;
 530:	09 c0       	rjmp	.+18     	; 0x544 <Save_Input_num+0xa6>
		case 3:
		sprintf((char*)pw_state, "Insert PW: ****");
 532:	80 e1       	ldi	r24, 0x10	; 16
 534:	ed e5       	ldi	r30, 0x5D	; 93
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	de 01       	movw	r26, r28
 53a:	11 96       	adiw	r26, 0x01	; 1
 53c:	01 90       	ld	r0, Z+
 53e:	0d 92       	st	X+, r0
 540:	8a 95       	dec	r24
 542:	e1 f7       	brne	.-8      	; 0x53c <Save_Input_num+0x9e>
		break;
	}
	
	Lcd_Pos(0,0);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	fd dd       	rcall	.-1030   	; 0x144 <Lcd_Pos>
	Lcd_STR((unsigned char*)"Door lock system");
 54a:	82 e2       	ldi	r24, 0x22	; 34
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	ee dd       	rcall	.-1060   	; 0x12c <Lcd_STR>
	Lcd_Pos(1, 0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	f7 dd       	rcall	.-1042   	; 0x144 <Lcd_Pos>
	Lcd_STR((unsigned char*)pw_state);
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	e8 dd       	rcall	.-1072   	; 0x12c <Lcd_STR>
 55c:	60 96       	adiw	r28, 0x10	; 16
}
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <Init>:
 56e:	26 de       	rcall	.-948    	; 0x1bc <UART_Init>

void Init()
{
	UART_Init();
	Keypad_Init();
 570:	64 de       	rcall	.-824    	; 0x23a <Keypad_Init>
	Piezo_Init();
 572:	01 df       	rcall	.-510    	; 0x376 <Piezo_Init>
	StepMotor_Init();
 574:	d2 de       	rcall	.-604    	; 0x31a <StepMotor_Init>
 576:	d4 de       	rcall	.-600    	; 0x320 <Mode_Interrupt_Init>
	Mode_Interrupt_Init();
 578:	50 ce       	rjmp	.-864    	; 0x21a <LCD_Init>
 57a:	08 95       	ret

0000057c <KeyPad_Mode>:
	LCD_Init();
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
}

void KeyPad_Mode()
{
	int input_pw_cnt = 0;
 582:	00 e0       	ldi	r16, 0x00	; 0
 584:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char temp = 0;
	// 비밀번호 4자리 입력 받음
	while (input_pw_cnt < 4)
 586:	1e c0       	rjmp	.+60     	; 0x5c4 <KeyPad_Mode+0x48>
	{
		// 모드전환 체크
		if(Mode_flag == false)
 588:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 58c:	81 11       	cpse	r24, r1
 58e:	0f c0       	rjmp	.+30     	; 0x5ae <KeyPad_Mode+0x32>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <KeyPad_Mode+0x24>
		{
			// input_pw 초기화
			for(int i = 0; i < 4; i++)
			input_pw[i] = 0;
 596:	fc 01       	movw	r30, r24
 598:	e0 56       	subi	r30, 0x60	; 96
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	10 82       	st	Z, r1
	{
		// 모드전환 체크
		if(Mode_flag == false)
		{
			// input_pw 초기화
			for(int i = 0; i < 4; i++)
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	84 30       	cpi	r24, 0x04	; 4
 5a2:	91 05       	cpc	r25, r1
 5a4:	c4 f3       	brlt	.-16     	; 0x596 <KeyPad_Mode+0x1a>
			input_pw[i] = 0;
			// swap 활성화
			swap = true;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
			break;
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <KeyPad_Mode+0x50>
		}
		
		// 채터링 방지 코드
		unsigned char pre_temp = 0;
		unsigned char cur_temp = 0;
		cur_temp = keyscan();
 5ae:	4c de       	rcall	.-872    	; 0x248 <keyscan>
		if(cur_temp != 0 && pre_temp == 0)
 5b0:	81 11       	cpse	r24, r1
		{
			// temp 정의
			temp = cur_temp;
 5b2:	c8 2f       	mov	r28, r24
		}
		pre_temp = cur_temp;

		// 입력값 저장
		if( temp != 0)
 5b4:	cc 23       	and	r28, r28
		{
			//부저 비프음 출력
			Beep_Melody();
 5b6:	39 f0       	breq	.+14     	; 0x5c6 <KeyPad_Mode+0x4a>
 5b8:	ea de       	rcall	.-556    	; 0x38e <Beep_Melody>
			Save_Input_num(temp, input_pw_cnt);
 5ba:	b8 01       	movw	r22, r16
 5bc:	8c 2f       	mov	r24, r28
 5be:	6f df       	rcall	.-290    	; 0x49e <Save_Input_num>
			temp = 0;
			input_pw_cnt++;
 5c0:	0f 5f       	subi	r16, 0xFF	; 255
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
	LCD_Init();
}

void KeyPad_Mode()
{
	int input_pw_cnt = 0;
 5c4:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char temp = 0;
	// 비밀번호 4자리 입력 받음
	while (input_pw_cnt < 4)
 5c6:	04 30       	cpi	r16, 0x04	; 4
 5c8:	11 05       	cpc	r17, r1
 5ca:	f4 f2       	brlt	.-68     	; 0x588 <KeyPad_Mode+0xc>
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	8f eb       	ldi	r24, 0xBF	; 191
 5d0:	96 e0       	ldi	r25, 0x06	; 6
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <KeyPad_Mode+0x56>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <KeyPad_Mode+0x60>
 5dc:	00 00       	nop
			temp = 0;
			input_pw_cnt++;
		}
	}
	_delay_ms(300);
}
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	08 95       	ret

000005e6 <UART_Mode>:

void UART_Mode()
{
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	a0 97       	sbiw	r28, 0x20	; 32
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
	int input_pw_cnt = 0;
	unsigned char temp = 0;
	
	unsigned char info_msg[] = "\r\nDoor lock system\r\nInsert PW: ";
 600:	80 e2       	ldi	r24, 0x20	; 32
 602:	ed e6       	ldi	r30, 0x6D	; 109
 604:	f1 e0       	ldi	r31, 0x01	; 1
 606:	de 01       	movw	r26, r28
 608:	11 96       	adiw	r26, 0x01	; 1
 60a:	01 90       	ld	r0, Z+
 60c:	0d 92       	st	X+, r0
 60e:	8a 95       	dec	r24
 610:	e1 f7       	brne	.-8      	; 0x60a <UART_Mode+0x24>
	puts_USART0(info_msg);
 612:	ce 01       	movw	r24, r28
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	e7 dd       	rcall	.-1074   	; 0x1e6 <puts_USART0>
	_delay_ms(300);
}

void UART_Mode()
{
	int input_pw_cnt = 0;
 618:	e1 2c       	mov	r14, r1
 61a:	f1 2c       	mov	r15, r1
	
	// 비밀번호 4자리 입력 받음
	while (input_pw_cnt < 4)
	{
		// temp 정의
		temp = getch();
 61c:	21 c0       	rjmp	.+66     	; 0x660 <UART_Mode+0x7a>
 61e:	ef dd       	rcall	.-1058   	; 0x1fe <getch>
 620:	18 2f       	mov	r17, r24
		// 모드전환 체크
		if(Mode_flag == true)
 622:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 626:	88 23       	and	r24, r24
 628:	81 f0       	breq	.+32     	; 0x64a <UART_Mode+0x64>
 62a:	06 c0       	rjmp	.+12     	; 0x638 <UART_Mode+0x52>
		{
			// input_pw 초기화
			for(int i = 0; i < 4; i++)
			input_pw[i] = 0;
 62c:	fc 01       	movw	r30, r24
 62e:	e0 56       	subi	r30, 0x60	; 96
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	10 82       	st	Z, r1
		temp = getch();
		// 모드전환 체크
		if(Mode_flag == true)
		{
			// input_pw 초기화
			for(int i = 0; i < 4; i++)
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	02 c0       	rjmp	.+4      	; 0x63c <UART_Mode+0x56>
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	91 05       	cpc	r25, r1
 640:	ac f3       	brlt	.-22     	; 0x62c <UART_Mode+0x46>
			input_pw[i] = 0;
			// swap 활성화
			swap = true;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
			break;
		}
		
		//부저 비프음 출력
		Beep_Melody();
 648:	0f c0       	rjmp	.+30     	; 0x668 <UART_Mode+0x82>
		putch_USART0('*');
 64a:	a1 de       	rcall	.-702    	; 0x38e <Beep_Melody>
 64c:	8a e2       	ldi	r24, 0x2A	; 42
 64e:	c4 dd       	rcall	.-1144   	; 0x1d8 <putch_USART0>
		
		// 입력값 저장
		if( temp != 0)
 650:	11 23       	and	r17, r17
		{
			Save_Input_num(temp, input_pw_cnt);
 652:	31 f0       	breq	.+12     	; 0x660 <UART_Mode+0x7a>
 654:	b7 01       	movw	r22, r14
 656:	81 2f       	mov	r24, r17
 658:	22 df       	rcall	.-444    	; 0x49e <Save_Input_num>
			temp = 0;
			input_pw_cnt++;
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	e2 1a       	sub	r14, r18
 65e:	f2 0a       	sbc	r15, r18
	
	unsigned char info_msg[] = "\r\nDoor lock system\r\nInsert PW: ";
	puts_USART0(info_msg);
	
	// 비밀번호 4자리 입력 받음
	while (input_pw_cnt < 4)
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	e8 16       	cp	r14, r24
 664:	f1 04       	cpc	r15, r1
 666:	dc f2       	brlt	.-74     	; 0x61e <UART_Mode+0x38>
 668:	9f ef       	ldi	r25, 0xFF	; 255
 66a:	2f eb       	ldi	r18, 0xBF	; 191
 66c:	86 e0       	ldi	r24, 0x06	; 6
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	20 40       	sbci	r18, 0x00	; 0
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	e1 f7       	brne	.-8      	; 0x66e <UART_Mode+0x88>
 676:	00 c0       	rjmp	.+0      	; 0x678 <UART_Mode+0x92>
 678:	00 00       	nop
			temp = 0;
			input_pw_cnt++;
		}
	}
	_delay_ms(300);
}
 67a:	a0 96       	adiw	r28, 0x20	; 32
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	ff 90       	pop	r15
 68e:	ef 90       	pop	r14
 690:	08 95       	ret

00000692 <Input_Result>:

void Input_Result()
{
	Lcd_Clear();
 692:	66 dd       	rcall	.-1332   	; 0x160 <Lcd_Clear>
	Lcd_Pos(0,0);
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	55 dd       	rcall	.-1366   	; 0x144 <Lcd_Pos>
	// 비밀번호가 같은지 판단하여 LCD창에 결과 출력
	if(strcmp((char*)input_pw, (char*)PASS_WORD) == 0)
 69a:	6d e1       	ldi	r22, 0x1D	; 29
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	80 ea       	ldi	r24, 0xA0	; 160
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	66 d0       	rcall	.+204    	; 0x770 <strcmp>
 6a4:	89 2b       	or	r24, r25
 6a6:	31 f4       	brne	.+12     	; 0x6b4 <Input_Result+0x22>
	{
		Lcd_STR((unsigned char*)"OPEN DOOR");
 6a8:	8d e8       	ldi	r24, 0x8D	; 141
 6aa:	91 e0       	ldi	r25, 0x01	; 1
		Success_Melody();
 6ac:	3f dd       	rcall	.-1410   	; 0x12c <Lcd_STR>
		Open_Door();
 6ae:	a6 de       	rcall	.-692    	; 0x3fc <Success_Melody>
 6b0:	d7 de       	rcall	.-594    	; 0x460 <Open_Door>
	}
	else
	{
		Lcd_STR((unsigned char*)"Retry!");
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <Input_Result+0x2a>
 6b4:	87 e9       	ldi	r24, 0x97	; 151
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	39 dd       	rcall	.-1422   	; 0x12c <Lcd_STR>
		Failure_Melody();
 6ba:	b4 de       	rcall	.-664    	; 0x424 <Failure_Melody>
 6bc:	2f ef       	ldi	r18, 0xFF	; 255
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	91 e1       	ldi	r25, 0x11	; 17
 6c2:	21 50       	subi	r18, 0x01	; 1
 6c4:	80 40       	sbci	r24, 0x00	; 0
 6c6:	90 40       	sbci	r25, 0x00	; 0
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <Input_Result+0x30>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <Input_Result+0x3a>
 6cc:	00 00       	nop
 6ce:	08 95       	ret

000006d0 <main>:
 6d0:	4e df       	rcall	.-356    	; 0x56e <Init>
	Init();
	
	while (1)
	{
		// LCD 초기 세팅
		LCD_INFO();
 6d2:	44 de       	rcall	.-888    	; 0x35c <LCD_INFO>
 6d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>

		// 모드 설정
		if(Mode_flag) // 키패드 모드
 6d8:	88 23       	and	r24, r24
 6da:	11 f0       	breq	.+4      	; 0x6e0 <main+0x10>
			KeyPad_Mode();
 6dc:	4f df       	rcall	.-354    	; 0x57c <KeyPad_Mode>
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <main+0x12>
		else  //UART 모드
			UART_Mode();
 6e0:	82 df       	rcall	.-252    	; 0x5e6 <UART_Mode>
 6e2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
		
		//KeyPad <-> UART 전환해야 하는지 판단
		if(swap)
 6e6:	88 23       	and	r24, r24
 6e8:	19 f0       	breq	.+6      	; 0x6f0 <main+0x20>
		{
			swap = false;
 6ea:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__data_end>
			continue;
 6ee:	f1 cf       	rjmp	.-30     	; 0x6d2 <main+0x2>
		}

		// 입력한 비밀번호를 판단하여 결과 결정
		Input_Result();
 6f0:	d0 df       	rcall	.-96     	; 0x692 <Input_Result>
 6f2:	ef cf       	rjmp	.-34     	; 0x6d2 <main+0x2>

000006f4 <__divmodsi4>:
 6f4:	05 2e       	mov	r0, r21
 6f6:	97 fb       	bst	r25, 7
 6f8:	16 f4       	brtc	.+4      	; 0x6fe <__divmodsi4+0xa>
 6fa:	00 94       	com	r0
 6fc:	0f d0       	rcall	.+30     	; 0x71c <__negsi2>
 6fe:	57 fd       	sbrc	r21, 7
 700:	05 d0       	rcall	.+10     	; 0x70c <__divmodsi4_neg2>
 702:	14 d0       	rcall	.+40     	; 0x72c <__udivmodsi4>
 704:	07 fc       	sbrc	r0, 7
 706:	02 d0       	rcall	.+4      	; 0x70c <__divmodsi4_neg2>
 708:	46 f4       	brtc	.+16     	; 0x71a <__divmodsi4_exit>
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__negsi2>

0000070c <__divmodsi4_neg2>:
 70c:	50 95       	com	r21
 70e:	40 95       	com	r20
 710:	30 95       	com	r19
 712:	21 95       	neg	r18
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	4f 4f       	sbci	r20, 0xFF	; 255
 718:	5f 4f       	sbci	r21, 0xFF	; 255

0000071a <__divmodsi4_exit>:
 71a:	08 95       	ret

0000071c <__negsi2>:
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__udivmodsi4>:
 72c:	a1 e2       	ldi	r26, 0x21	; 33
 72e:	1a 2e       	mov	r1, r26
 730:	aa 1b       	sub	r26, r26
 732:	bb 1b       	sub	r27, r27
 734:	fd 01       	movw	r30, r26
 736:	0d c0       	rjmp	.+26     	; 0x752 <__udivmodsi4_ep>

00000738 <__udivmodsi4_loop>:
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	ee 1f       	adc	r30, r30
 73e:	ff 1f       	adc	r31, r31
 740:	a2 17       	cp	r26, r18
 742:	b3 07       	cpc	r27, r19
 744:	e4 07       	cpc	r30, r20
 746:	f5 07       	cpc	r31, r21
 748:	20 f0       	brcs	.+8      	; 0x752 <__udivmodsi4_ep>
 74a:	a2 1b       	sub	r26, r18
 74c:	b3 0b       	sbc	r27, r19
 74e:	e4 0b       	sbc	r30, r20
 750:	f5 0b       	sbc	r31, r21

00000752 <__udivmodsi4_ep>:
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	1a 94       	dec	r1
 75c:	69 f7       	brne	.-38     	; 0x738 <__udivmodsi4_loop>
 75e:	60 95       	com	r22
 760:	70 95       	com	r23
 762:	80 95       	com	r24
 764:	90 95       	com	r25
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	bd 01       	movw	r22, r26
 76c:	cf 01       	movw	r24, r30
 76e:	08 95       	ret

00000770 <strcmp>:
 770:	fb 01       	movw	r30, r22
 772:	dc 01       	movw	r26, r24
 774:	8d 91       	ld	r24, X+
 776:	01 90       	ld	r0, Z+
 778:	80 19       	sub	r24, r0
 77a:	01 10       	cpse	r0, r1
 77c:	d9 f3       	breq	.-10     	; 0x774 <strcmp+0x4>
 77e:	99 0b       	sbc	r25, r25
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
