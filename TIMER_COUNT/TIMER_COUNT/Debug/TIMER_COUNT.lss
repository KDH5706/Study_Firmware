
TIMER_COUNT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000184  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bb  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d3  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e8  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	82 c0       	rjmp	.+260    	; 0x11a <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	55 d0       	rcall	.+170    	; 0x16e <main>
  c4:	5d c0       	rjmp	.+186    	; 0x180 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_9>:
volatile unsigned char Time_STOP = 0;

unsigned char timer0Cnt = 0;

ISR(TIMER2_COMP_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	cli();
  d4:	f8 94       	cli
	OCR2 += 72;
  d6:	83 b5       	in	r24, 0x23	; 35
  d8:	88 5b       	subi	r24, 0xB8	; 184
  da:	83 bd       	out	0x23, r24	; 35
	//TCNT2 = 0;

	timer0Cnt++;
  dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if(timer0Cnt == 50)
  e6:	82 33       	cpi	r24, 0x32	; 50
  e8:	89 f4       	brne	.+34     	; 0x10c <__vector_9+0x44>
	{
		if(Time_STOP == 0)
  ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Time_STOP>
  ee:	81 11       	cpse	r24, r1
  f0:	0b c0       	rjmp	.+22     	; 0x108 <__vector_9+0x40>
		{
			time_s++;
  f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <time_s>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <time_s>

			if(time_s >= 16)
  fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <time_s>
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	10 f0       	brcs	.+4      	; 0x108 <__vector_9+0x40>
			{
				time_s = 0;
 104:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <time_s>
			}
		}
		timer0Cnt = 0;
 108:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	sei();
 10c:	78 94       	sei
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_5>:

ISR(INT4_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	cli();
 128:	f8 94       	cli
	Time_STOP = 1 - Time_STOP;
 12a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Time_STOP>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	89 1b       	sub	r24, r25
 132:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Time_STOP>
	sei();
 136:	78 94       	sei
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <Init>:

void Init()
{
	DDRA = 0xff;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x00;
 14a:	12 b8       	out	0x02, r1	; 2
	
	TCCR2 = 0x05;
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
 150:	14 bc       	out	0x24, r1	; 36
	OCR2 = 72;
 152:	88 e4       	ldi	r24, 0x48	; 72
 154:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0x80;
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	87 bf       	out	0x37, r24	; 55
	TIFR |= 1 << OCF2;
 15a:	86 b7       	in	r24, 0x36	; 54
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	86 bf       	out	0x36, r24	; 54
	
	EIMSK = 0x10;
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	89 bf       	out	0x39, r24	; 57
	EICRB = 0x03;
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	9a bf       	out	0x3a, r25	; 58
	EIFR = 0x10;
 168:	88 bf       	out	0x38, r24	; 56
	
	sei();
 16a:	78 94       	sei
 16c:	08 95       	ret

0000016e <main>:
}

int main(void)
{
	Init();
 16e:	eb df       	rcall	.-42     	; 0x146 <Init>
	
	while (1)
	{
		PORTA = FND_DATA_TBL[time_s];
 170:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <time_s>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	f8 cf       	rjmp	.-16     	; 0x170 <main+0x2>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
