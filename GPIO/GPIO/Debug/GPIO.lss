
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000927  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  00000c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	92 c0       	rjmp	.+292    	; 0x1da <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
	0b00001110
};


int main()
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	28 97       	sbiw	r28, 0x08	; 8
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;	// PRORTA를 출력으로 설정
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x0F;	// PRORTA를 출력으로 설정	0b 0000 1111
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	81 bb       	out	0x11, r24	; 17
	
	int display[4] = {0,0,0,0};
  d4:	fe 01       	movw	r30, r28
  d6:	31 96       	adiw	r30, 0x01	; 1
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	df 01       	movw	r26, r30
  dc:	1d 92       	st	X+, r1
  de:	8a 95       	dec	r24
  e0:	e9 f7       	brne	.-6      	; 0xdc <main+0x24>
	
	while (1)
	{
		for (int num = 1000 ; num > 0 ; num--)
  e2:	08 ee       	ldi	r16, 0xE8	; 232
  e4:	13 e0       	ldi	r17, 0x03	; 3
  e6:	4d c0       	rjmp	.+154    	; 0x182 <main+0xca>
		{
			// num 자리수 단위로 쪼개기
			display[0] = num%10;
  e8:	ea e0       	ldi	r30, 0x0A	; 10
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	c8 01       	movw	r24, r16
  ee:	bf 01       	movw	r22, r30
  f0:	4d d0       	rcall	.+154    	; 0x18c <__divmodhi4>
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
			display[1] = num%100/10;
  f6:	24 e6       	ldi	r18, 0x64	; 100
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	c8 01       	movw	r24, r16
  fc:	b9 01       	movw	r22, r18
  fe:	46 d0       	rcall	.+140    	; 0x18c <__divmodhi4>
 100:	bf 01       	movw	r22, r30
 102:	44 d0       	rcall	.+136    	; 0x18c <__divmodhi4>
 104:	7c 83       	std	Y+4, r23	; 0x04
 106:	6b 83       	std	Y+3, r22	; 0x03
			display[2] = num%1000/100;
 108:	c8 01       	movw	r24, r16
 10a:	68 ee       	ldi	r22, 0xE8	; 232
 10c:	73 e0       	ldi	r23, 0x03	; 3
 10e:	3e d0       	rcall	.+124    	; 0x18c <__divmodhi4>
 110:	b9 01       	movw	r22, r18
 112:	3c d0       	rcall	.+120    	; 0x18c <__divmodhi4>
 114:	7e 83       	std	Y+6, r23	; 0x06
 116:	6d 83       	std	Y+5, r22	; 0x05
			display[3] = num/10000;
 118:	c8 01       	movw	r24, r16
 11a:	60 e1       	ldi	r22, 0x10	; 16
 11c:	77 e2       	ldi	r23, 0x27	; 39
 11e:	36 d0       	rcall	.+108    	; 0x18c <__divmodhi4>
 120:	78 87       	std	Y+8, r23	; 0x08
 122:	6f 83       	std	Y+7, r22	; 0x07
 124:	60 e0       	ldi	r22, 0x00	; 0
			
			// 해당 num 100ms 만큼 출력
			for (int j = 0; j < 5 ; j++)
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	27 c0       	rjmp	.+78     	; 0x178 <main+0xc0>
 12a:	c9 01       	movw	r24, r18
			{
				// i번째 FND만 켜고, i번째 자리수의 숫자를 FND에 출력
				for (int i = 0; i < 4 ; i++)
				{
					// i번째 FND만 켜기
					PORTD = sw[i];
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	fc 01       	movw	r30, r24
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	40 81       	ld	r20, Z
 138:	42 bb       	out	0x12, r20	; 18
 13a:	e1 e0       	ldi	r30, 0x01	; 1
					// i번째 자리수의 숫자를 FND에 출력
					PORTA = FND[display[i]];
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	01 90       	ld	r0, Z+
 148:	f0 81       	ld	r31, Z
 14a:	e0 2d       	mov	r30, r0
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e8 5f       	subi	r30, 0xF8	; 248
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	80 81       	ld	r24, Z
 156:	8b bb       	out	0x1b, r24	; 27
 158:	8a e4       	ldi	r24, 0x4A	; 74
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	94 e2       	ldi	r25, 0x24	; 36
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xa4>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xaa>
 162:	00 00       	nop
 164:	2f 5f       	subi	r18, 0xFF	; 255
			
			// 해당 num 100ms 만큼 출력
			for (int j = 0; j < 5 ; j++)
			{
				// i번째 FND만 켜고, i번째 자리수의 숫자를 FND에 출력
				for (int i = 0; i < 4 ; i++)
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0xb6>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	24 30       	cpi	r18, 0x04	; 4
 170:	31 05       	cpc	r19, r1
 172:	dc f2       	brlt	.-74     	; 0x12a <main+0x72>
 174:	6f 5f       	subi	r22, 0xFF	; 255
			display[1] = num%100/10;
			display[2] = num%1000/100;
			display[3] = num/10000;
			
			// 해당 num 100ms 만큼 출력
			for (int j = 0; j < 5 ; j++)
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	65 30       	cpi	r22, 0x05	; 5
 17a:	71 05       	cpc	r23, r1
 17c:	b4 f3       	brlt	.-20     	; 0x16a <main+0xb2>
 17e:	01 50       	subi	r16, 0x01	; 1
	
	int display[4] = {0,0,0,0};
	
	while (1)
	{
		for (int num = 1000 ; num > 0 ; num--)
 180:	11 09       	sbc	r17, r1
 182:	10 16       	cp	r1, r16
 184:	11 06       	cpc	r1, r17
 186:	0c f4       	brge	.+2      	; 0x18a <main+0xd2>
 188:	af cf       	rjmp	.-162    	; 0xe8 <main+0x30>
 18a:	ab cf       	rjmp	.-170    	; 0xe2 <main+0x2a>

0000018c <__divmodhi4>:
 18c:	97 fb       	bst	r25, 7
 18e:	07 2e       	mov	r0, r23
 190:	16 f4       	brtc	.+4      	; 0x196 <__divmodhi4+0xa>
 192:	00 94       	com	r0
 194:	06 d0       	rcall	.+12     	; 0x1a2 <__divmodhi4_neg1>
 196:	77 fd       	sbrc	r23, 7
 198:	08 d0       	rcall	.+16     	; 0x1aa <__divmodhi4_neg2>
 19a:	0b d0       	rcall	.+22     	; 0x1b2 <__udivmodhi4>
 19c:	07 fc       	sbrc	r0, 7
 19e:	05 d0       	rcall	.+10     	; 0x1aa <__divmodhi4_neg2>
 1a0:	3e f4       	brtc	.+14     	; 0x1b0 <__divmodhi4_exit>

000001a2 <__divmodhi4_neg1>:
 1a2:	90 95       	com	r25
 1a4:	81 95       	neg	r24
 1a6:	9f 4f       	sbci	r25, 0xFF	; 255
 1a8:	08 95       	ret

000001aa <__divmodhi4_neg2>:
 1aa:	70 95       	com	r23
 1ac:	61 95       	neg	r22
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255

000001b0 <__divmodhi4_exit>:
 1b0:	08 95       	ret

000001b2 <__udivmodhi4>:
 1b2:	aa 1b       	sub	r26, r26
 1b4:	bb 1b       	sub	r27, r27
 1b6:	51 e1       	ldi	r21, 0x11	; 17
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <__udivmodhi4_ep>

000001ba <__udivmodhi4_loop>:
 1ba:	aa 1f       	adc	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	a6 17       	cp	r26, r22
 1c0:	b7 07       	cpc	r27, r23
 1c2:	10 f0       	brcs	.+4      	; 0x1c8 <__udivmodhi4_ep>
 1c4:	a6 1b       	sub	r26, r22
 1c6:	b7 0b       	sbc	r27, r23

000001c8 <__udivmodhi4_ep>:
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	5a 95       	dec	r21
 1ce:	a9 f7       	brne	.-22     	; 0x1ba <__udivmodhi4_loop>
 1d0:	80 95       	com	r24
 1d2:	90 95       	com	r25
 1d4:	bc 01       	movw	r22, r24
 1d6:	cd 01       	movw	r24, r26
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
